import java.nio.file.Files

apply plugin: 'com.android.application'
apply plugin: 'WjrPlugins'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.wjr.waterfalllayout"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile file('Test.jks')
            storePassword '123456'
            keyAlias = 'key0'
            keyPassword '123456'
        }
        release {
            storeFile file('Test.jks')
            storePassword '123456'
            keyAlias = 'key0'
            keyPassword '123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled true      // 对代码进行混淆和压缩
            shrinkResources true    //是否清理无用资源,依赖于minifyEnabled
            zipAlignEnabled true    //资源按4字节对齐
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                output.outputFileName = "ACE-${android.defaultConfig.versionName}_debug.apk"
            } else if (variant.buildType.name == "release") {
                output.outputFileName = "ACE-${android.defaultConfig.versionName}_release.apk"
            }
        }
    }

    flavorDimensions "version"
    productFlavors {
        //简体中文版
        zh {
            dimension "version"
        }
        //繁体中文版
        tw {
            dimension "version"
        }
        //测试版
        a1 {
            dimension "version"
        }
        a2 {
            dimension "version"
        }
        a3 {
            dimension "version"
        }
    }

}

task copyApk {
    doLast {
        def apkFiles = project.fileTree("${rootProject.rootDir.absolutePath}/app/build/outputs/apk/")
                .findAll {
                    it.name.endsWith(".apk")
                }
        def outputsDir = new File("${rootProject.rootDir.absolutePath}/outputs/")
        if (!outputsDir.exists()) {
            outputsDir.mkdir()
        }
        apkFiles.each { File file ->
            def targetFile = new File(outputsDir, file.name)
            if (targetFile.exists()) {
                targetFile.delete()
            }
            def targetPath = targetFile.toPath()
            Files.copy(file.toPath(), targetPath)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
